------------------ NOTES ------- NOTES ------- NOTES ------------------
Todo: 
		==== DB ====
	- Fetch XPM from vircurex
	- Clean up API functions for BTC-E
	- Combine averaging over time workers into one worker
Now	- Buttons must look better on database page
Now	- Move DB Clean, DB reset, Start logging buttons to DB page
	- Find a resource which contains old data (Vircurex maybe, cryptocharts?)
	- Take into account asset quantity changes over time per user
	- Table reset, cleanup and logging initiation all one click.
	- Fetch amounts of assets on each website for a user (no need for manual)
	- Starting up logging only writes if time passed from last write is correct.
	- When Nuking and Averaging tables, show state on website

		==== Homepage ====
	- Homepage on left needs to be more easy to read (Total USD clearer)
	- Add in a bar representing finances as of the current minute on homepage
	- Ability to represent bar graph in terms of BTC or USD(at the time)
	- Line chart needs to display the timing instead of index
	- Allow homepage assets overview (left side) to update in realtime
	- More charts!
	- Clean up JS for homepage, one seperate file via asset pipeline?
	
		==== MISC ====
	- Public release? Keep quetly on github?
	- Combine all JS into one file via rails asset pipeline(?)
	- Clean up styling for each page
	- Remove unused views and controllers.
	- Turbolinks?

--------------------------------------------------------------









---- New stuff goes ontop, stop putting it at the bottom! ----
Maybe use an array instead of that horrific long case statement?

	Array[five_min_table, thirty_min_table, hundredtwenty_min_table, threesixty_min_table]

	if five_min_table.not_nil then FiveminuteTimedAsset.new(Array.five_min_table)
	....
	if thirty_min_table.not_nil then ThirtyMinTimedAsset.new(Array.thirty_min_table)


	#minutes = [5, 30, 120, 360]

		#minutes.each{ |minute|
		#		puts "Doing " + minute + " table now"
		#
		#		TimedAsset.count.times do |variable|
		#			puts "This will loop over the entire TimedAsset Table"
		#		end

Just do one damn table first!
First up is doing the 5 minute moving average table

	large_table = TimedAsset.all

	while large_table.count >= 5
		new_table = large_table.shift(5)
		large_5min_table.save(average(new_table, 5))
	end

	